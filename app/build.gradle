apply plugin: 'com.android.application'
apply plugin: 'walle'

android {
    compileSdkVersion COMPILE_SDK_VERSION
    buildToolsVersion BUILD_TOOLS_VERSION

    useLibrary 'org.apache.http.legacy'

    defaultConfig {
        applicationId "com.sunmi.assistant"
        minSdkVersion MIN_SDK_VERSION
        targetSdkVersion TARGET_SDK_VERSION
        versionCode Integer.parseInt(VERSION_CODE)
        versionName VERSION_NAME

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        testInstrumentationRunner "android.support.test_udp.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ['resourcePackageName': "com.sunmi.assistant",
                             "HOST"               : "app"]
            }
        }
        multiDexEnabled true

        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }

        manifestPlaceholders = [
                ENV_VALUE       : "ENV_TEST",
                DB_VERSION_VALUE: "2",
                APP_NAME        : "@string/app_name",
                BAIDU_STAT_ID   : "d88e0c2263",
                MTA_APPKEY      : "A6INR132MGAI",
                MTA_CHANNEL     : "myapp"]
    }

    signingConfigs {
        sign {
            storeFile file("../Keystore.jks")
            storePassword "SUNMIwireless388"
            keyAlias "SUNMI_Key"
            keyPassword "SUNMIwireless388"
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".dev"
            manifestPlaceholders = [
                    ENV_VALUE       : "ENV_TEST",
                    DB_VERSION_VALUE: "2",
                    APP_NAME        : "商米助手dev",
                    BAIDU_STAT_ID   : "416f7bee22",
                    MTA_APPKEY      : "A6INR132MGAI"]
        }

        smtest {
            applicationIdSuffix ".test"
            manifestPlaceholders = [
                    ENV_VALUE       : "ENV_TEST",
                    DB_VERSION_VALUE: "2",
                    APP_NAME        : "商米助手test",
                    BAIDU_STAT_ID   : "416f7bee22",
                    MTA_APPKEY      : "A6INR132MGAI"]
            zipAlignEnabled true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.sign
        }

        uat {
            manifestPlaceholders = [
                    ENV_VALUE       : "ENV_UAT",
                    DB_VERSION_VALUE: "2",
                    APP_NAME        : "商米助手UAT",
                    BAIDU_STAT_ID   : "d88e0c2263",
                    MTA_APPKEY      : "A6INR132MGAI"]
            zipAlignEnabled true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.sign
        }

        release {
            manifestPlaceholders = [
                    ENV_VALUE       : "ENV_RELEASE",
                    DB_VERSION_VALUE: "2",
                    APP_NAME        : "@string/app_name",
                    BAIDU_STAT_ID   : "d88e0c2263",
                    MTA_APPKEY      : "A6INR132MGAI"]
            zipAlignEnabled true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.sign
        }
    }

    flavorDimensions "default"
    productFlavors {
        myapp {
            manifestPlaceholders = [
                    MTA_CHANNEL: "myapp"
            ]
        }

        google {
            manifestPlaceholders = [
                    MTA_CHANNEL: "google"
            ]
            versionCode Integer.parseInt(GOOGLE_VERSION_CODE)
            versionName GOOGLE_VERSION_NAME
        }

    }

    sourceSets {
        main {
            jniLibs.srcDirs 'libs'
        }
    }
    //so 文件
    splits {
        abi {
            enable true
            reset()
            include 'arm64-v8a', 'armeabi-v7a' //根据需求自己修改
            universalApk true
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/proguard/androidx-annotations.pro'
    }

}

repositories {
    flatDir {
        dirs 'libs'
    }
}

walle {
    //指定渠道包的输出路径
    apkOutputFolder = new File("${project.buildDir}/outputs/channels")
    //定制渠道包的APK的文件名称 例如app-xiaomi.apk
    apkFileNameFormat = 'app-${channel}.apk'
    //渠道配置文件
    channelFile = new File("${project.getProjectDir()}/channel")
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation fileTree(include: ['*.aar'], dir: 'libs')

    implementation project(':commonlib')//公共库
    implementation project(':ipc')
    implementation project(':sunmiservice')
    implementation project(':apmanager')
    implementation project(':cloudprinter')
    implementation project(':MPChartLib')
    implementation project(':datelibrary')

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    annotationProcessor "org.androidannotations:androidannotations:${AAVersion}"
    testImplementation 'org.mockito:mockito-core:2.19.0'
    androidTestImplementation 'org.mockito:mockito-core:2.19.0'

    implementation 'com.squareup.leakcanary:leakcanary-android:1.6.2'

    implementation 'com.youth.banner:banner:1.4.10'  //最新版本

    annotationProcessor "com.github.xiaojinzi123.Component:component-compiler:${CVersion}"

    //百度统计
    implementation 'com.baidu.mobstat:mtj-sdk-circle:latest.integration'

}
